/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The typeahead search API provides search for objects from a single workspace.
 */
export class Typeahead {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Get objects via typeahead
     *
     * @remarks
     * Retrieves objects in the workspace based via an auto-completion/typeahead
     * search algorithm. This feature is meant to provide results quickly, so do
     * not rely on this API to provide extremely accurate search results. The
     * result set is limited to a single page of results with a maximum size, so
     * you wonâ€™t be able to fetch large numbers of results.
     *
     * The typeahead search API provides search for objects from a single
     * workspace. This endpoint should be used to query for objects when
     * creating an auto-completion/typeahead search feature. This API is meant
     * to provide results quickly and should not be relied upon for accurate or
     * exhaustive search results. The results sets are limited in size and
     * cannot be paginated.
     *
     * Queries return a compact representation of each object which is typically
     * the gid and name fields. Interested in a specific set of fields or all of
     * the fields?! Of course you are. Use field selectors to manipulate what
     * data is included in a response.
     *
     * Resources with type `user` are returned in order of most contacted to
     * least contacted. This is determined by task assignments, adding the user
     * to projects, and adding the user as a follower to tasks, messages,
     * etc.
     *
     * Resources with type `project` are returned in order of recency. This is
     * determined when the user visits the project, is added to the project, and
     * completes tasks in the project.
     *
     * Resources with type `task` are returned with priority placed on tasks
     * the user is following, but no guarantee on the order of those tasks.
     *
     * Resources with type `project_template` are returned with priority
     * placed on favorited project templates.
     *
     * Leaving the `query` string empty or omitted will give you results, still
     * following the resource ordering above. This could be used to list users or
     * projects that are relevant for the requesting user's api token.
     */
    async typeaheadForWorkspace(
        req: operations.TypeaheadForWorkspaceRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.TypeaheadForWorkspaceResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TypeaheadForWorkspaceRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/workspaces/{workspace_gid}/typeahead",
            req
        );

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.TypeaheadForWorkspaceResponse =
            new operations.TypeaheadForWorkspaceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.typeaheadForWorkspace200ApplicationJSONObject = utils.objectToClass(
                        JSON.parse(decodedRes),
                        operations.TypeaheadForWorkspace200ApplicationJSON
                    );
                }
                break;
            case [400, 401, 403, 404, 500].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.errorResponse = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.ErrorResponse
                    );
                }
                break;
        }

        return res;
    }
}
