/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RFCDate } from "../../types";
import { CustomFieldCompact } from "./customfieldcompact";
import { CustomFieldSettingResponse } from "./customfieldsettingresponse";
import { UserCompact } from "./usercompact";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Color of the project.
 */
export enum ProjectResponseColor {
    DarkPink = "dark-pink",
    DarkGreen = "dark-green",
    DarkBlue = "dark-blue",
    DarkRed = "dark-red",
    DarkTeal = "dark-teal",
    DarkBrown = "dark-brown",
    DarkOrange = "dark-orange",
    DarkPurple = "dark-purple",
    DarkWarmGray = "dark-warm-gray",
    LightPink = "light-pink",
    LightGreen = "light-green",
    LightBlue = "light-blue",
    LightRed = "light-red",
    LightTeal = "light-teal",
    LightBrown = "light-brown",
    LightOrange = "light-orange",
    LightPurple = "light-purple",
    LightWarmGray = "light-warm-gray",
}

/**
 * A *project template* is an object that allows new projects to be created with a predefined setup, which may include tasks, sections, Rules, etc. It simplifies the process of running a workflow that involves a similar set of work every time.
 */
export class ProjectResponseCreatedFromTemplate extends SpeakeasyBase {
    /**
     * Globally unique identifier of the resource, as a string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gid" })
    gid?: string;

    /**
     * Name of the project template.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * The base type of this resource.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "resource_type" })
    resourceType?: string;
}

/**
 * The color associated with the status update.
 */
export enum ProjectResponseCurrentStatusColor {
    Green = "green",
    Yellow = "yellow",
    Red = "red",
    Blue = "blue",
}

/**
 * *Deprecated: new integrations should prefer the `status_update` resource.*
 *
 * @remarks
 * A *project status* is an update on the progress of a particular project, and is sent out to all project followers when created. These updates include both text describing the update and a color code intended to represent the overall state of the project: "green" for projects that are on track, "yellow" for projects at risk, and "red" for projects that are behind.
 */
export class ProjectResponseCurrentStatus extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "author" })
    @Type(() => UserCompact)
    author?: UserCompact;

    /**
     * The color associated with the status update.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "color" })
    color: ProjectResponseCurrentStatusColor;

    /**
     * The time at which this resource was created.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "created_by" })
    @Type(() => UserCompact)
    createdBy?: UserCompact;

    /**
     * Globally unique identifier of the resource, as a string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gid" })
    gid?: string;

    /**
     * [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "html_text" })
    htmlText?: string;

    /**
     * The time at which this project status was last modified.
     *
     * @remarks
     * *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the project status.*
     */
    @SpeakeasyMetadata()
    @Expose({ name: "modified_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    modifiedAt?: Date;

    /**
     * The base type of this resource.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "resource_type" })
    resourceType?: string;

    /**
     * The text content of the status update.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "text" })
    text: string;

    /**
     * The title of the project status update.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "title" })
    title?: string;
}

/**
 * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
 *
 * @remarks
 * The `resource_subtype`s for `status` objects represent the type of their parent.
 */
export enum ProjectResponseCurrentStatusUpdateResourceSubtype {
    ProjectStatusUpdate = "project_status_update",
    PortfolioStatusUpdate = "portfolio_status_update",
    GoalStatusUpdate = "goal_status_update",
}

/**
 * A *status update* is an update on the progress of a particular project, portfolio, or goal, and is sent out to all of its parent's followers when created. These updates include both text describing the update and a `status_type` intended to represent the overall state of the project.
 */
export class ProjectResponseCurrentStatusUpdate extends SpeakeasyBase {
    /**
     * Globally unique identifier of the resource, as a string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gid" })
    gid?: string;

    /**
     * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
     *
     * @remarks
     * The `resource_subtype`s for `status` objects represent the type of their parent.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "resource_subtype" })
    resourceSubtype?: ProjectResponseCurrentStatusUpdateResourceSubtype;

    /**
     * The base type of this resource.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "resource_type" })
    resourceType?: string;

    /**
     * The title of the status update.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "title" })
    title?: string;
}

/**
 * The default view (list, board, calendar, or timeline) of a project.
 */
export enum ProjectResponseDefaultView {
    List = "list",
    Board = "board",
    Calendar = "calendar",
    Timeline = "timeline",
}

/**
 * The icon for a project.
 */
export enum ProjectResponseIcon {
    List = "list",
    Board = "board",
    Timeline = "timeline",
    Calendar = "calendar",
    Rocket = "rocket",
    People = "people",
    Graph = "graph",
    Star = "star",
    Bug = "bug",
    LightBulb = "light_bulb",
    Globe = "globe",
    Gear = "gear",
    Notebook = "notebook",
    Computer = "computer",
    Check = "check",
    Target = "target",
    Html = "html",
    Megaphone = "megaphone",
    ChatBubbles = "chat_bubbles",
    Briefcase = "briefcase",
    PageLayout = "page_layout",
    MountainFlag = "mountain_flag",
    Puzzle = "puzzle",
    Presentation = "presentation",
    LineAndSymbols = "line_and_symbols",
    SpeedDial = "speed_dial",
    Ribbon = "ribbon",
    Shoe = "shoe",
    ShoppingBasket = "shopping_basket",
    Map = "map",
    Ticket = "ticket",
    Coins = "coins",
}

/**
 * A *user* object represents an account in Asana that can be given access to various workspaces, projects, and tasks.
 */
export class ProjectResponseOwner extends SpeakeasyBase {
    /**
     * Globally unique identifier of the resource, as a string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gid" })
    gid?: string;

    /**
     * *Read-only except when same user as requester*. The userâ€™s name.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * The base type of this resource.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "resource_type" })
    resourceType?: string;
}

/**
 * A *Project Brief* allows you to explain the what and why of the project to your team.
 */
export class ProjectResponseProjectBrief extends SpeakeasyBase {
    /**
     * Globally unique identifier of the resource, as a string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gid" })
    gid?: string;

    /**
     * The base type of this resource.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "resource_type" })
    resourceType?: string;
}

/**
 * A *team* is used to group related projects and people together within an organization. Each project in an organization is associated with a team.
 */
export class ProjectResponseTeam extends SpeakeasyBase {
    /**
     * Globally unique identifier of the resource, as a string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gid" })
    gid?: string;

    /**
     * The name of the team.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * The base type of this resource.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "resource_type" })
    resourceType?: string;
}

/**
 * A *workspace* is the highest-level organizational unit in Asana. All projects and tasks have an associated workspace.
 */
export class ProjectResponseWorkspace extends SpeakeasyBase {
    /**
     * Globally unique identifier of the resource, as a string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gid" })
    gid?: string;

    /**
     * The name of the workspace.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * The base type of this resource.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "resource_type" })
    resourceType?: string;
}

/**
 * A *project* represents a prioritized list of tasks in Asana or a board with columns of tasks represented as cards. It exists in a single workspace or organization and is accessible to a subset of users in that workspace or organization, depending on its permissions.
 */
export class ProjectResponse extends SpeakeasyBase {
    /**
     * True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "archived" })
    archived?: boolean;

    /**
     * Color of the project.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "color" })
    color?: ProjectResponseColor;

    /**
     * True if the project is currently marked complete, false if not.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "completed" })
    completed?: boolean;

    /**
     * The time at which this project was completed, or null if the project is not completed.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "completed_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    completedAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "completed_by" })
    @Type(() => UserCompact)
    completedBy?: UserCompact;

    /**
     * The time at which this resource was created.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "created_from_template" })
    @Type(() => ProjectResponseCreatedFromTemplate)
    createdFromTemplate?: ProjectResponseCreatedFromTemplate;

    /**
     * *Deprecated: new integrations should prefer the `current_status_update` resource.*
     */
    @SpeakeasyMetadata()
    @Expose({ name: "current_status" })
    @Type(() => ProjectResponseCurrentStatus)
    currentStatus?: ProjectResponseCurrentStatus;

    /**
     * The latest `status_update` posted to this project.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "current_status_update" })
    @Type(() => ProjectResponseCurrentStatusUpdate)
    currentStatusUpdate?: ProjectResponseCurrentStatusUpdate;

    /**
     * Array of Custom Field Settings (in compact form).
     */
    @SpeakeasyMetadata({ elemType: CustomFieldSettingResponse })
    @Expose({ name: "custom_field_settings" })
    @Type(() => CustomFieldSettingResponse)
    customFieldSettings?: CustomFieldSettingResponse[];

    /**
     * Array of Custom Fields.
     */
    @SpeakeasyMetadata({ elemType: CustomFieldCompact })
    @Expose({ name: "custom_fields" })
    @Type(() => CustomFieldCompact)
    customFields?: CustomFieldCompact[];

    /**
     * The default view (list, board, calendar, or timeline) of a project.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "default_view" })
    defaultView?: ProjectResponseDefaultView;

    /**
     * *Deprecated: new integrations should prefer the `due_on` field.*
     */
    @SpeakeasyMetadata()
    @Expose({ name: "due_date" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    dueDate?: Date;

    /**
     * The day on which this project is due. This takes a date with format YYYY-MM-DD.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "due_on" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    dueOn?: Date;

    /**
     * Array of users following this project. Followers are a subset of members who have opted in to receive "tasks added" notifications for a project.
     */
    @SpeakeasyMetadata({ elemType: UserCompact })
    @Expose({ name: "followers" })
    @Type(() => UserCompact)
    followers?: UserCompact[];

    /**
     * Globally unique identifier of the resource, as a string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gid" })
    gid?: string;

    /**
     * [Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "html_notes" })
    htmlNotes?: string;

    /**
     * The icon for a project.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "icon" })
    icon?: ProjectResponseIcon;

    /**
     * [Opt In](/docs/input-output-options). *Deprecated - please use a project template endpoint instead (more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432)).* Determines if the project is a template.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "is_template" })
    isTemplate?: boolean;

    /**
     * Array of users who are members of this project.
     */
    @SpeakeasyMetadata({ elemType: UserCompact })
    @Expose({ name: "members" })
    @Type(() => UserCompact)
    members?: UserCompact[];

    /**
     * The time at which this project was last modified.
     *
     * @remarks
     * *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*
     */
    @SpeakeasyMetadata()
    @Expose({ name: "modified_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    modifiedAt?: Date;

    /**
     * Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * Free-form textual information associated with the project (ie., its description).
     */
    @SpeakeasyMetadata()
    @Expose({ name: "notes" })
    notes?: string;

    /**
     * The current owner of the project, may be null.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "owner" })
    @Type(() => ProjectResponseOwner)
    owner?: ProjectResponseOwner;

    /**
     * A url that points directly to the object within Asana.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "permalink_url" })
    permalinkUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "project_brief" })
    @Type(() => ProjectResponseProjectBrief)
    projectBrief?: ProjectResponseProjectBrief;

    /**
     * True if the project is public to its team.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "public" })
    public?: boolean;

    /**
     * The base type of this resource.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "resource_type" })
    resourceType?: string;

    /**
     * The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*
     */
    @SpeakeasyMetadata()
    @Expose({ name: "start_on" })
    @Transform(({ value }) => new RFCDate(value), { toClassOnly: true })
    startOn?: RFCDate;

    @SpeakeasyMetadata()
    @Expose({ name: "team" })
    @Type(() => ProjectResponseTeam)
    team?: ProjectResponseTeam;

    @SpeakeasyMetadata()
    @Expose({ name: "workspace" })
    @Type(() => ProjectResponseWorkspace)
    workspace?: ProjectResponseWorkspace;
}
