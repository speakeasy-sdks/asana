/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { WorkspaceCompact } from "./workspacecompact";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The current state of the export.
 */
export enum OrganizationExportResponseState {
    Pending = "pending",
    Started = "started",
    Finished = "finished",
    Error = "error",
}

/**
 * An *organization_export* object represents a request to export the complete data of an Organization in JSON format.
 */
export class OrganizationExportResponse extends SpeakeasyBase {
    /**
     * The time at which this resource was created.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    /**
     * Download this URL to retreive the full export of the organization
     *
     * @remarks
     * in JSON format. It will be compressed in a gzip (.gz) container.
     *
     * *Note: May be null if the export is still in progress or
     * failed.  If present, this URL may only be valid for 1 hour from
     * the time of retrieval. You should avoid persisting this URL
     * somewhere and rather refresh on demand to ensure you do not keep
     * stale URLs.*
     */
    @SpeakeasyMetadata()
    @Expose({ name: "download_url" })
    downloadUrl?: string;

    /**
     * Globally unique identifier of the resource, as a string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gid" })
    gid?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "organization" })
    @Type(() => WorkspaceCompact)
    organization?: WorkspaceCompact;

    /**
     * The base type of this resource.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "resource_type" })
    resourceType?: string;

    /**
     * The current state of the export.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "state" })
    state?: OrganizationExportResponseState;
}
